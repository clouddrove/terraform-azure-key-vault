---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#


# Name of this project
name: Terraform AZURE KEY-VAULT

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-azure-key-vault

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v1.1.7-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module to create key-vault resource on AZURE.

# extra content
include:
  - "terraform.md"

# How to use this project
# yamllint disable rule:line-length
usage: |-
  ### Simple Example
  Here is an example of how you can use this module in your inventory structure:
    #### key-vault with access policy
  ```hcl
  module "key_vault" {
   source                      = "clouddrove/key-vault/azure"
   name                        = "annkkdsovvdcc"
   environment                 = "test"
   label_order                 = ["name", "environment", ]
   resource_group_name         = module.resource_group.resource_group_name
   purge_protection_enabled    = false
   enabled_for_disk_encryption = true
   sku_name                    = "standard"
   subnet_id                   = module.vnet.vnet_subnets[0]
   virtual_network_id          = module.vnet.vnet_id[0]
   #private endpoint
   enable_private_endpoint     = true
   #access_policy
   access_policy               = [{}]
   }
    ```
  #### key-vault with RBAC
    ```hcl
  module "key_vault" {
   source                      = "clouddrove/key-vault/azure"
   name                        = "annkkdsovvdcc"
   environment                 = "test"
   label_order                 = ["name", "environment", ]
   resource_group_name         = module.resource_group.resource_group_name
   purge_protection_enabled    = false
   enabled_for_disk_encryption = true
   sku_name                    = "standard"
   subnet_id                   = module.vnet.vnet_subnets[0]
   virtual_network_id          = module.vnet.vnet_id[0]
   #private endpoint
   enable_private_endpoint     = true
   ##RBAC
   enable_rbac_authorization   = true
   principal_id                = ["71d1XXXXXXXXXXXXX166d7c97", "2fa59XXXXXXXXXXXXXX82716fb05"]
   role_definition_name        = ["Key Vault Administrator", ]
   }
    ```
